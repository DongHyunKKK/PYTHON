# ---------------------------------------------------------------
# 리스트(List) 데이터 타입
# - 여러 종류의 여러 개의 데이터를 저장하는 타입
# - 문법 : [ 데이터1, 데이터2, ......, 데이터N ]
# - 특징 : 데이터 하나 하나를 요소/원소 라고 함
#         하나 하나의 요소/원소를 식별하기 위해서 인덱싱(Indexing)
# - 순서가 있는 데이터 타입 => 시퀀스 데이터 타입
# ---------------------------------------------------------------

# 리스트 데이터 생성
# 숫자 10개를 메모리에 저장
no = [10, 30, 100, 52, 100, 98, 18, 78, 10, 32]
print(f'id(no) => {id(no)}\n{id(no[0])} => {id(no[0])}\n{id(no[1])} => {id(no[1])}')

# 리스트의 원소/요소 한 개씩 접근 하는 방법 ==> 변수명[인덱스]
# - 왼쪽 ==> 오른쪽 : 0 ~
# - 오른쪽 ==> 왼쪽 : - 1 ~
# ==> 슬라이싱 가능

# 마지막 3개의 점수만 출력해 주세요.
print(no[-3: ])

# 짝수 번째 인덱스만 출력하세요. => 0, 2 ,4, 6, 8, 10
print(f'짝수 요소만 출력 : {no[::2]}')
print(f'홀수 요소만 출력 : {no[1::2]}')

# ---------------------------------------------------------------
# 다양한 리스트 생성
# ---------------------------------------------------------------
# 실수 데이터로 구성된 리스트 생성
floatNums = [4., 3.1, 6.3, 5.01]

# str 데이터로 구성된 리스트 생성
strNums = ['44', '56', '98']

# bool 데이터로 구성된 리스트 생성
boolNums = [False, False, True, True, True]

# 다양한 데이터 타입으로 구성된 리스트 생성
nums = ['100', 98, False, 7.12, 'Apple', True]

# 빈 리스트 생성
nums = []

# 리스트 안에 리스트 데이터로 구성된 리스트 생성
nums = [10, 20, 30, ['A', 'B'], 200, 100]
#       0   1   2       3        4    5
#                     0    1
# 리스트의 요소 출력
print(f'nums[0] => {nums[0]}, {type(nums[0])}')
print(f'nums[1] => {nums[1]}, {type(nums[1])}')
print(f'nums[2] => {nums[2]}, {type(nums[2])}')
print(f'nums[3] => {nums[3]}, {type(nums[3])}')
print(f'nums[4] => {nums[4]}, {type(nums[4])}')
print(f'nums[5] => {nums[5]}, {type(nums[5])}')

print(f'nums[3] => {nums[3][1]}, {type(nums[3][1])}')

data2 = [[[1, 2, 3]], 'A']

print(data2[0])
print(data2[0][0])
print(data2[0][0][0])